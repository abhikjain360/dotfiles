#!/bin/bash

# to allow clangd detect all headers
cat > compile_flags.txt << EOF
-std=c++$1
-Wall
-Wpedantic
-g
-I/usr/include
-I/usr/local/include
-I/usr/lib/gcc/include/c++/10.2.0
-I/usr/lib/gcc/include/c++/10.2.0/x86_64-pc-linux-gnu
-I/usr/lib/gcc/include/c++/10.2.0/backward
-I/usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/include
-I/usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/include-fixed
EOF

# formatting I prefer
cat > .clang-format << EOF
BasedOnStyle: Google
IndentWidth: 4

AccessModifierOffset: -4
AlignConsecutiveAssignments: true
AlignOperands: true
AlignTrailingComments: true
AllowShortLambdasOnASingleLine: All
AllowShortBlocksOnASingleLine: Empty
# enable this in clang 12
#AllowShortEnumsOnASingleLine: true
AllowShortFunctionsOnASingleLine: Inline
AllowShortIfStatementsOnASingleLine: Never
BinPackArguments: false
BinPackParameters: false
ColumnLimit: 80
PointerAlignment: Left
SpaceAfterTemplateKeyword: true
SpacesBeforeTrailingComments: 1

# Custom BraceWrapping
BreakBeforeBraces: Custom
BraceWrapping:
    AfterCaseLabel: false
    AfterClass: false
    AfterControlStatement: Never
    AfterEnum: false
    AfterFunction: false
    AfterNamespace: false
    #AfterObjDeclaration: false
    AfterStruct: false
    AfterUnion: false
    AfterExternBlock: false
    BeforeCatch: false
    BeforeElse: false
    #BeforeLambdaBody: false
    #BeforeWhile: false
    IndentBraces: false
    #SplitEmptyFunctions: false
    SplitEmptyRecord: false
    SplitEmptyNamespace: false
EOF

# Makefile to use neomake to compile
cat > Makefile << EOF
app:
	rm -rf code && clang++ code.cpp -g -Wall -Wpedantic -fsanitize=memory -std=c++$1 -o code && ./code
debug:
	rm -rf code && clang++ code.cpp -g -Wall -Wpedantic -fsanitize=memory -std=c++$1 -o code && gdb ./code
clean:
	rm -rf code
EOF

# Basic code
cat > code.cpp << EOF
#include <iostream>

int main()
{

	return 0;
}
EOF
